#!/usr/bin/env ruby

original_path = File.expand_path(__FILE__)

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'gtalkback'
require 'gt_progressbar'

require 'FileUtils'

# TODO: Fix bug where gaps show in the username/message border in the first log_group
# TODO: !!! Make the output handle threaded messages, combining them into one file !!!
# (needed because, when we delete the chats from GMail, the non-chat replies go with.
# Right now they are saved, but written as a seperate file w/o content)
# TODO: Use the chat thread first-received date instead of the last-updated date?
# TODO: Wrte a better WHERE statement that selects only chats (look into using other DB
# fields, like chat_reply_to or whatever)
# TODO: See if we can't get a cleaner snapshot of the database w/o the other non-chat
# items in it.
# TODO: Check into outputting prettier HTML or XHTML (indented)
# TODO: Refactor whole damn this into nice proper Ruby app with ./lib, ./bin, etc.
# along with tests.
# TODO: Check into feasability of just using regexs for inout and ERB for output

# =======================================================================================
# A note on speed vs. fragility:
# Because using css selectors is so slow, in many cases we manually walk the DOM, doing
# quick sanity checks here and there to make sure the element we expect to be the second
# child of the first child of the <body> (or whatever) is what we expect it to be. By
# eliminating CSS calls, we run in 30% of the time as with them. But, of course, if
# Google's DOM changes even slightly, the whole thing breaks. On the other hand, CSS
# selectors weren't much better; because Google used inline styles rather than classes,
# IDs, etc., we had to do things like select all the DIVs and presume they're all message
# items, or that 'span > span > span', should it exist, is a username.
# =======================================================================================

# Nokogiri convienence method
# class String
#   def html_strip
#     self.gsub(/^[\302\240|\s]*|[\302\240|\s]*$/, '')
#   end
# end

puts "GMail Chat Backup Utility v1.0"
puts

if (ARGV.length != 2) then
  puts "Error: incorrect number of paramters"
  puts "Usage: chat_extractor.rb database.db ./output_dir"
  abort
end

# TODO: Use more robust argument parsing system
database_file = File.expand_path(ARGV[0])
output_dir = File.expand_path(ARGV[1])

if(File.exist?(output_dir)) then
  abort "Error: Output directory name already in use by a file" if !File.directory?(output_dir)
  abort "Error: unable to write to output directory" if !File.writable?(output_dir)
else
  begin
    Dir.mkdir(output_dir)
  rescue SystemCallError
    abort "Error: Unable to create output directory"
  end
end

Dir.chdir(output_dir)


# Will not replace an existing style, should it exist
unless File.exist?('style.css') then
  FileUtils.cp(original_path + '/../../resources/style.css', './style.css')
end

fetcher = GTalkFetcher.new(database_file)
