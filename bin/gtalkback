#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'gtalkback'
require 'progressbar'

require 'rubygems'
require 'sqlite3'
require 'nokogiri'

# TODO: Fix bug where gaps show in the username/message border in the first log_group
# TODO: !!! Make the output handle threaded messages, combining them into one file !!!
# (needed because, when we delete the chats from GMail, the non-chat replies go with.
# Right now they are saved, but written as a seperate file w/o content)
# TODO: Use the chat thread first-received date instead of the last-updated date?
# TODO: Wrte a better WHERE statement that selects only chats (look into using other DB
# fields, like chat_reply_to or whatever)
# TODO: See if we can't get a cleaner snapshot of the database w/o the other non-chat
# items in it.
# TODO: Check into outputting prettier HTML or XHTML (indented)
# TODO: Refactor whole damn this into nice proper Ruby app with ./lib, ./bin, etc.
# along with tests.
# TODO: Check into feasability of just using regexs for inout and ERB for output
# TODO: Copy CSS file into directory instead of writing string to file.

# =======================================================================================
# A note on speed vs. fragility:
# Because using css selectors is so slow, in many cases we manually walk the DOM, doing
# quick sanity checks here and there to make sure the element we expect to be the second
# child of the first child of the <body> (or whatever) is what we expect it to be. By
# eliminating CSS calls, we run in 30% of the time as with them. But, of course, if
# Google's DOM changes even slightly, the whole thing breaks. On the other hand, CSS
# selectors weren't much better; because Google used inline styles rather than classes,
# IDs, etc., we had to do things like select all the DIVs and presume they're all message
# items, or that 'span > span > span', should it exist, is a username.
# =======================================================================================

# Nokogiri convienence method
# class String
#   def html_strip
#     self.gsub(/^[\302\240|\s]*|[\302\240|\s]*$/, '')
#   end
# end

puts "GMail Chat Backup Utility v1.0"
puts

if (ARGV.length != 2) then
	puts "Error: incorrect number of paramters"
	puts "Usage: chat_extractor.rb database.db ./output_dir"
	abort
end

# TODO: Use more robust argument parsing system
database_file = File.expand_path(ARGV[0])
output_dir = File.expand_path(ARGV[1])

if(File.exist?(output_dir)) then
	abort "Error: Output directory name already in use by a file" if !File.directory?(output_dir)
	abort "Error: unable to write to output directory" if !File.writable?(output_dir)
else
	begin
		Dir.mkdir(output_dir)
	rescue SystemCallError
		abort "Error: Unable to create output directory"
	end
end

Dir.chdir(output_dir)

css_file_contents = <<EOFCSS
body {font-family: "Helvetica", "Arial", sans-serif; font-size: 11pt; background-color: #5bd7c6; width: 50em; margin-left: auto; margin-right: auto; }
.header {margin-bottom: 15px; }
.title {font-size: 30pt; font-weight: bold; text-shadow: 1px 1px 2px #96faeb; }
.content {background-color: #fff9cc; border-radius: 6px; box-shadow: 0px 0px 10px 1px #3d0d16; 
	-webkit-box-shadow:  0px 0px 10px 1px #3d0d16; -moz-box-shadow:  0px 0px 10px 1px #3d0d16; overflow: hidden; }
.date {text-align: right; background-color: #f2e66e; 
	background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0.01, rgb(219,207,100)), color-stop(0.53, rgb(242,231,110))); 
	background-image: -moz-linear-gradient(center bottom, rgb(219,207,100) 1%, rgb(242,231,110) 53%); 
	padding: 0.5em 0.5em 0.5em 0; font-weight: bold; color: #b5a436; 
	font-size: 12pt; text-shadow: 1px 1px 1px #fff6a3; /*border-bottom: 1px solid #bfb654;*/ 
	box-shadow: 0px 1px 2px 0px #9e963c; -webkit-box-shadow:  0px 1px 2px 0px #9e963c; 
	-moz-box-shadow:  0px 1px 2px 0px #9e963c; }
.log_group {padding-left: 6.5em; position: relative; left: 1px; }
.log_group:first-child {border-top: none; }
.log_group:first-child .log_item {padding-top: 0.8em; margin-top: 0.2em; }
.log_group:first-child .username {padding-top: 0.8em; }
.me {background-color: #fffadb; }
.timestamp {float: right; display: block; color: #999; font-style: italic; font-size: 9pt; margin-left: 0.8em; }
.username {display: block; float: left; position: absolute; left: 0em; font-weight: bold; text-align: right; 
	width: 6em; margin-top: 0.2em; }
.message {padding-left: 1em; display: block; }
.log_item {font-size: 10pt; line-height: 1.5; border-left: 1px solid #f2e66e; padding-right: 0.8em; }
.log_item:last-child {border-bottom: none; padding-bottom: 0.2em; }
.log_item:first-of-type {padding-top: 0.2em; }
.timebreak {text-align: center; width: 100%; font-size: 10pt; font-style: italic; background-color: #e8e2ba; 
	color: #999; text-shadow: 1px 1px 1px #ccc; line-height: 1.3; }
.timebreak + .log_group {border-top: none; }
.log_group:last-child .log_item:last-child {padding-bottom: 1em;}
EOFCSS

# Will not replace an existing style, should it exist
unless File.exist?('style.css') then
	File.open('style.css', 'w') do |f|
		f.write css_file_contents
	end
end

fetcher = GTalkFetcher.new(database_file)
